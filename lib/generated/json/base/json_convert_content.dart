// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:welcome_flutter/bean/user_info_entity.dart';
import 'package:welcome_flutter/generated/json/user_info_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case UserInfoEntity:
				return userInfoEntityFromJson(data as UserInfoEntity, json) as T;
			case UserInfoRetData:
				return userInfoRetDataFromJson(data as UserInfoRetData, json) as T;
			case UserInfoRetDataImgList:
				return userInfoRetDataImgListFromJson(data as UserInfoRetDataImgList, json) as T;
			case UserInfoRetDataAllowOrgList:
				return userInfoRetDataAllowOrgListFromJson(data as UserInfoRetDataAllowOrgList, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case UserInfoEntity:
				return userInfoEntityToJson(data as UserInfoEntity);
			case UserInfoRetData:
				return userInfoRetDataToJson(data as UserInfoRetData);
			case UserInfoRetDataImgList:
				return userInfoRetDataImgListToJson(data as UserInfoRetDataImgList);
			case UserInfoRetDataAllowOrgList:
				return userInfoRetDataAllowOrgListToJson(data as UserInfoRetDataAllowOrgList);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (UserInfoEntity).toString()){
			return UserInfoEntity().fromJson(json);
		}
		if(type == (UserInfoRetData).toString()){
			return UserInfoRetData().fromJson(json);
		}
		if(type == (UserInfoRetDataImgList).toString()){
			return UserInfoRetDataImgList().fromJson(json);
		}
		if(type == (UserInfoRetDataAllowOrgList).toString()){
			return UserInfoRetDataAllowOrgList().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<UserInfoEntity>[] is M){
			return data.map<UserInfoEntity>((e) => UserInfoEntity().fromJson(e)).toList() as M;
		}
		if(<UserInfoRetData>[] is M){
			return data.map<UserInfoRetData>((e) => UserInfoRetData().fromJson(e)).toList() as M;
		}
		if(<UserInfoRetDataImgList>[] is M){
			return data.map<UserInfoRetDataImgList>((e) => UserInfoRetDataImgList().fromJson(e)).toList() as M;
		}
		if(<UserInfoRetDataAllowOrgList>[] is M){
			return data.map<UserInfoRetDataAllowOrgList>((e) => UserInfoRetDataAllowOrgList().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}